正则表达式：正则表达式其实就是用于操作字符串的一个规则，正则表达式的规则使用了特殊的符号表示规则

预定义字符类：
    .           任何字符(与行结束符可能匹配可能不匹配)
    \d          数字[0-9]
    \D          非数字[^0-9]
    \s          空白字符[\t\n\x0B\f\r]
    \w          单词字符[a-zA-Z_0-9]
    \W          非单词字符[^\w]

注意：任何预定义字符没有加上数量词之前都只能匹配一个字符而已

Greedy 数量词
    X?          X，一次或一次没有
    X*          X，零次或多次
    X+          X，一次或多次
    X{n}        X，恰好n次
    X{n,}       X，至少n次
    X{n,m}      X，至少n次，但是不超过m次

范围词
    [abc]       a、b或c(简单类)
    [^abc]      任何字符，除了a、b或c(否定)
    [a-zA-Z]    a到z 或 A-Z，两头字母包括在内(范围)
    [a-d[m-p]]  a到d 或 m到p ：[a-dm-p](并集)
    [a-z&&[def]] d、e或f(交集)

注意：范围词里面不管内容有多长，没有数量词的配合都只能匹配一个字符而已

边界匹配器
    ^           行的开头
    $           行的结尾
    \b          单词的边界
    \B          非单词边界
    \A          输入的开头
    \G          上一个匹配的结尾
    \Z          输入的结尾，仅用于最后的结束符(如果有的话)
    \z          输入的结尾
正则表达式主要是用于操作字符串的规则，正则表达式对字符串的操作主要有以下几种应用：

        匹配 matches()：
        切割split()：
        替换replace()：
        查找：
        ---  查找：
                指定为字符串的正则表达式必须首先被编译为此类的实例。然后，可将得到的模式用于创建Matcher对象，
                依照正则表达式，该对象可以与任意字符序列匹配。执行匹配所涉及的所有状态都驻留在匹配器中，所以多个匹配器可以共享同一模式。因此，典型的调用顺序是

                    Pattern p = Pattern.compile("a*b");
                    Matcher m = p.matcher("aaaaab");
                    bolean b = m.matches();

                查找需要使用的对象：
                    1、Pattern(对象)
                    2、Matcher(匹配器对象)

                匹配器使用到的方法：
                    1.find() 通知匹配器去匹配字符串，查找符合规则的字符串。如果能查找到符合规则的字符串，则返回true，否则返回false
                    2.group() 获取符合规则的字符串。

                注意： 使用group方法的时候，一定要先电泳find()方法让匹配器去查找符合规则的字符串，否则报错
如果正则的内容需要被复用，那么需要对正则的内容进行分组。分组的目的是为了提高正则的复用性

